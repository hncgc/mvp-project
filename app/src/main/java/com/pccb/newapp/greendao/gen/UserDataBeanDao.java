package com.pccb.newapp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pccb.newapp.bean.UserDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DATA_BEAN".
*/
public class UserDataBeanDao extends AbstractDao<UserDataBean, Long> {

    public static final String TABLENAME = "USER_DATA_BEAN";

    /**
     * Properties of entity UserDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, Long.class, "user_id", true, "_id");
        public final static Property Picture_url = new Property(1, String.class, "picture_url", false, "PICTURE_URL");
        public final static Property Real_name = new Property(2, String.class, "real_name", false, "REAL_NAME");
        public final static Property Nick_name = new Property(3, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Phone_num = new Property(4, String.class, "phone_num", false, "PHONE_NUM");
        public final static Property Islogin = new Property(5, Boolean.class, "islogin", false, "ISLOGIN");
        public final static Property Category_id = new Property(6, int.class, "category_id", false, "CATEGORY_ID");
        public final static Property Is_moderator = new Property(7, int.class, "is_moderator", false, "IS_MODERATOR");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
        public final static Property Username = new Property(9, String.class, "username", false, "USERNAME");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Grade = new Property(11, String.class, "grade", false, "GRADE");
        public final static Property RealNameLevel = new Property(12, String.class, "realNameLevel", false, "REAL_NAME_LEVEL");
        public final static Property CardNo = new Property(13, String.class, "cardNo", false, "CARD_NO");
        public final static Property Version = new Property(14, String.class, "version", false, "VERSION");
        public final static Property AppClient = new Property(15, String.class, "appClient", false, "APP_CLIENT");
        public final static Property PartnerId = new Property(16, String.class, "partnerId", false, "PARTNER_ID");
        public final static Property SecretKey = new Property(17, String.class, "secretKey", false, "SECRET_KEY");
        public final static Property AccessKey = new Property(18, String.class, "accessKey", false, "ACCESS_KEY");
        public final static Property IsBandCard = new Property(19, boolean.class, "isBandCard", false, "IS_BAND_CARD");
    }


    public UserDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: user_id
                "\"PICTURE_URL\" TEXT," + // 1: picture_url
                "\"REAL_NAME\" TEXT," + // 2: real_name
                "\"NICK_NAME\" TEXT," + // 3: nick_name
                "\"PHONE_NUM\" TEXT," + // 4: phone_num
                "\"ISLOGIN\" INTEGER," + // 5: islogin
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 6: category_id
                "\"IS_MODERATOR\" INTEGER NOT NULL ," + // 7: is_moderator
                "\"REMARK\" TEXT," + // 8: remark
                "\"USERNAME\" TEXT," + // 9: username
                "\"EMAIL\" TEXT," + // 10: email
                "\"GRADE\" TEXT," + // 11: grade
                "\"REAL_NAME_LEVEL\" TEXT," + // 12: realNameLevel
                "\"CARD_NO\" TEXT," + // 13: cardNo
                "\"VERSION\" TEXT," + // 14: version
                "\"APP_CLIENT\" TEXT," + // 15: appClient
                "\"PARTNER_ID\" TEXT," + // 16: partnerId
                "\"SECRET_KEY\" TEXT," + // 17: secretKey
                "\"ACCESS_KEY\" TEXT," + // 18: accessKey
                "\"IS_BAND_CARD\" INTEGER NOT NULL );"); // 19: isBandCard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDataBean entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String picture_url = entity.getPicture_url();
        if (picture_url != null) {
            stmt.bindString(2, picture_url);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(3, real_name);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String phone_num = entity.getPhone_num();
        if (phone_num != null) {
            stmt.bindString(5, phone_num);
        }
 
        Boolean islogin = entity.getIslogin();
        if (islogin != null) {
            stmt.bindLong(6, islogin ? 1L: 0L);
        }
        stmt.bindLong(7, entity.getCategory_id());
        stmt.bindLong(8, entity.getIs_moderator());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(10, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(12, grade);
        }
 
        String realNameLevel = entity.getRealNameLevel();
        if (realNameLevel != null) {
            stmt.bindString(13, realNameLevel);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(14, cardNo);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(15, version);
        }
 
        String appClient = entity.getAppClient();
        if (appClient != null) {
            stmt.bindString(16, appClient);
        }
 
        String partnerId = entity.getPartnerId();
        if (partnerId != null) {
            stmt.bindString(17, partnerId);
        }
 
        String secretKey = entity.getSecretKey();
        if (secretKey != null) {
            stmt.bindString(18, secretKey);
        }
 
        String accessKey = entity.getAccessKey();
        if (accessKey != null) {
            stmt.bindString(19, accessKey);
        }
        stmt.bindLong(20, entity.getIsBandCard() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDataBean entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String picture_url = entity.getPicture_url();
        if (picture_url != null) {
            stmt.bindString(2, picture_url);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(3, real_name);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String phone_num = entity.getPhone_num();
        if (phone_num != null) {
            stmt.bindString(5, phone_num);
        }
 
        Boolean islogin = entity.getIslogin();
        if (islogin != null) {
            stmt.bindLong(6, islogin ? 1L: 0L);
        }
        stmt.bindLong(7, entity.getCategory_id());
        stmt.bindLong(8, entity.getIs_moderator());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(10, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(12, grade);
        }
 
        String realNameLevel = entity.getRealNameLevel();
        if (realNameLevel != null) {
            stmt.bindString(13, realNameLevel);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(14, cardNo);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(15, version);
        }
 
        String appClient = entity.getAppClient();
        if (appClient != null) {
            stmt.bindString(16, appClient);
        }
 
        String partnerId = entity.getPartnerId();
        if (partnerId != null) {
            stmt.bindString(17, partnerId);
        }
 
        String secretKey = entity.getSecretKey();
        if (secretKey != null) {
            stmt.bindString(18, secretKey);
        }
 
        String accessKey = entity.getAccessKey();
        if (accessKey != null) {
            stmt.bindString(19, accessKey);
        }
        stmt.bindLong(20, entity.getIsBandCard() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDataBean readEntity(Cursor cursor, int offset) {
        UserDataBean entity = new UserDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // picture_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // real_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone_num
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // islogin
            cursor.getInt(offset + 6), // category_id
            cursor.getInt(offset + 7), // is_moderator
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // username
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // grade
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // realNameLevel
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cardNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // version
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // appClient
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // partnerId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // secretKey
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // accessKey
            cursor.getShort(offset + 19) != 0 // isBandCard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDataBean entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPicture_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReal_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIslogin(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setCategory_id(cursor.getInt(offset + 6));
        entity.setIs_moderator(cursor.getInt(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUsername(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGrade(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRealNameLevel(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCardNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVersion(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAppClient(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPartnerId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSecretKey(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAccessKey(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsBandCard(cursor.getShort(offset + 19) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDataBean entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDataBean entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDataBean entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
